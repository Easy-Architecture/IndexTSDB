//
// Created by maomao on 2021/2/2.
//

#include <cstring>

#ifndef INDEXTSDB_INDEXTSDB_PROTOCOL_H
#define INDEXTSDB_INDEXTSDB_PROTOCOL_H
#define INDEXPROTOCOL_VERSION 0x00;  //协议版本
#define CACHE_VERSION 0x00; //缓存版本

//Type
#define IsDDL 0x00
#define IsDML 0x40
#define IsCli  0x80
#define C_Code 0xc0   //检验命令类型
//DDL
#define ADD_USER 0x00
#define DELETE_USER 0x01
#define UPDATE_USERPOWER  0x02 //修改用户权限
#define CREATE_DATABASE 0x03
#define DELETE_DATABASE 0x04
#define CREATE_TABLE 0x05
#define DELETE_TABLE 0x06
#define SHOW_TABLE 0x07
#define SHOW_DATABASE 0x08
#define CHECK_DATABASE 0x09
#define CLEAR_CACHE 0x0a
//DML
#define BATCH_DATA 0x40  //批处理数据
#define SELECT_SQL 0x41
#define INSERT_SQL 0x42
#define DELETE_SQL 0x43
//server/client
#define REQUEST_CONNECT 0x80 //请求连接
#define RESPONSE_CONNECT 0x81 //请求响应
#define SUCCESS_CONNECT 0x82 //连接成功
#define REQUEST_PING 0x84 //ping请求
#define RESPONSE_PANG 0x85 //pang响应
#define DATA_CLOSE  0x87//数据传送完毕关闭连接
#define AGAIN_CONNECT 0x88 //重新连接 发送数据
#define FAIL_CONNECT 0x89 //连接失败
//result
#define DDL_SUCCESSFUL 0xc0 //DDL成功响应
#define DML_SUCCESSFUL 0xc1 //DML成功响应
#define DDL_FAIL 0xc2 //DDL响应失败
#define DML_FAIL 0xc3 //DML 响应失败
#define DDL_MESSAGE 0xc4 //DDL成功响应并返回信息
#define DML_MESSAGE 0xc5 //成功响应并返回信息
#define END_FLAG 0XFF //结束标志
#define R_CODE 0X8F; //异或密码
#define SEND_BUFFER 1024
typedef unsigned int u32;
typedef unsigned short u16;
typedef unsigned char u8;



typedef struct {
    u8 command; //命令
    u8 msgLength; //消息长度
    //u8 addLength; //增加的地址
    u16 crc16; //完整性校验
    u8 MsgPayLoad[SEND_BUFFER];//消息载荷
}IndexProtocol;
/*typedef struct{
    //ddl
    u8 cVersion; //缓存版本
    u8 name;
    //server
    u8 pVersion; //协议版本
    u8 code; //字符编码
    u32 heartTime; //心跳时间
    //cli
    u8 *userName;
    u8 *password;
    //pingpang
    u8 result; //响应结果
    u8 message[SEND_BUFFER]; //携带信息
}ProtocolBody;*/
//格式化
typedef struct
{
    void (*FmtU8)(u8 d);
    void (*FmtU16)(u16 d);
    void (*FmtU32)(u32 d);
    void (*FmtStr)(char* str);
    void (*FmtHex)(u8* Dt,u16 len);
    void (*FmtEnd)();
    void (*FmtCmd)(u8 cmd);
    /*    void (*FmtSVersion)(u8 SCEVersion);
    void (*FmtCVersion)(u8 SCEVersion);
    void (*DName);
    void (*TName);
    void (*UName);
    void (*CODEID);*/
    void (*HeartBeat);
    void (*FmtCrc16)();
    u8* (*GetBuffer)();
    u16 (*GetLength)();
}ProtocolFormat_t;

static IndexProtocol transferProtocol;
/*ProtocolBody  protocolBody;*/
static ProtocolFormat_t *protocolFormat;
static u32 SendProtocolLength = 0;

//CRC16高
const u8 CRC_Array_H[] =
        {
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
                0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
                0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
                0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
                0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
                0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
                0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
                0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
        };
//CRC16低
const u8 CRC_Array_L[] =
        {
                0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
                0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
                0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
                0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
                0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
                0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
                0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
                0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
                0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
                0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
                0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
                0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
                0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
                0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
                0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
                0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
                0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
                0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
                0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
                0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
                0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
                0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
                0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
                0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
                0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
                0x43, 0x83, 0x41, 0x81, 0x80, 0x40
        };

void DecodeTestHandler(void* p,u16 length);
ProtocolFormat_t * ProtocolFormatNew();
void Serialize();
bool insertSql(char* sql);
bool deleteSql(char *sql);
char* selectSql(char*sql);
int ProtocolProcessing(char sendBuffer[]);
int protocolIndex = 0;
int checkCommand(u8 cmd);
void TestProtocol();
#endif //INDEXTSDB_INDEXTSDB_PROTOCOL_H